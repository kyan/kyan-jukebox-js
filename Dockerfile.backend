# Backend Dockerfile for Kyan Jukebox (Bun Runtime)
# Build from project root: docker build -f Dockerfile.backend -t jukebox-backend .

# Build stage
FROM oven/bun:1.3-alpine AS build

RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files for dependency installation
COPY package.json bun.lock ./
COPY backend/package.json ./backend/

# Install dependencies (including devDependencies for build)
RUN bun install --frozen-lockfile

# Copy all source code (root and backend)
COPY ./backend ./backend/

# Build the application
RUN bun --filter @jukebox/backend build

# Production stage
FROM oven/bun:1.3-alpine

# Build arguments for runtime environment variables
ARG PORT=8080
ARG NODE_ENV=production
ARG SPOTIFY_ID
ARG SPOTIFY_SECRET
ARG SPOTIFY_NEW_TRACKS_ADDED_LIMIT=3
ARG WS_MOPIDY_URL
ARG WS_MOPIDY_PORT
ARG SQLITE_PATH
ARG SQLITE_TIMEOUT=30000
ARG IS_ALIVE_TIMEOUT=30000
ARG EXPLICIT_CONTENT=true
ARG IMAGE_CACHE_EXPIRES=86400

# Create non-root user
RUN addgroup -g 1001 app && adduser -u 1001 -G app -s /bin/sh -D app

WORKDIR /app

# Copy package files for production dependency installation
COPY --from=build /app/package.json ./
COPY --from=build /app/bun.lock ./
COPY --from=build /app/backend/package.json ./backend/

# Install only production dependencies
RUN bun install --frozen-lockfile --production && \
  bun pm cache rm

# Copy built application
COPY --from=build /app/backend/dist ./dist

# Remove package files (not needed at runtime)
RUN rm -f package.json bun.lock && rm -rf backend/

# Set runtime environment variables
ENV NODE_ENV=$NODE_ENV
ENV SPOTIFY_ID=$SPOTIFY_ID
ENV SPOTIFY_SECRET=$SPOTIFY_SECRET
ENV SPOTIFY_NEW_TRACKS_ADDED_LIMIT=$SPOTIFY_NEW_TRACKS_ADDED_LIMIT
ENV WS_MOPIDY_URL=$WS_MOPIDY_URL
ENV WS_MOPIDY_PORT=$WS_MOPIDY_PORT
ENV SQLITE_PATH=$SQLITE_PATH
ENV SQLITE_TIMEOUT=$SQLITE_TIMEOUT
ENV IS_ALIVE_TIMEOUT=$IS_ALIVE_TIMEOUT
ENV EXPLICIT_CONTENT=$EXPLICIT_CONTENT
ENV IMAGE_CACHE_EXPIRES=$IMAGE_CACHE_EXPIRES

USER app

EXPOSE 8080

CMD ["bun", "dist/index.js"]
