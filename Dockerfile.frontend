# Frontend Dockerfile for Kyan Jukebox (Single Binary)
# Build from project root: docker build -f Dockerfile.frontend -t jukebox-frontend .

# Build stage
FROM oven/bun:1.3-alpine AS build

# Install bash for script execution
RUN apk add --no-cache bash

# Build arguments for environment variables
ARG REACT_APP_WS_URL
ARG REACT_APP_WS_PORT

# Set environment variables for the build
ENV REACT_APP_WS_URL=$REACT_APP_WS_URL
ENV REACT_APP_WS_PORT=$REACT_APP_WS_PORT

WORKDIR /usr/src/app

# Copy workspace configuration
COPY package.json bun.lock ./
COPY frontend/package.json ./frontend/
COPY backend/package.json ./backend/

# Install dependencies with workspace structure
RUN bun install --frozen-lockfile

# Copy frontend source and build script
COPY ./frontend ./frontend/

# Build the frontend binary using the build script
WORKDIR /usr/src/app/frontend

# Make the build script executable and run it
RUN chmod +x build-binary.sh && \
  bash ./build-binary.sh jukebox-frontend

# Production stage - minimal Alpine image
FROM alpine:3.19

# Install ca-certificates and C++ runtime libraries
RUN apk --no-cache add ca-certificates libstdc++ libgcc

# Create non-root user
RUN addgroup -g 1001 -S bun && \
  adduser -S bun -u 1001

# Set working directory
WORKDIR /app

# Copy the binary from build stage
COPY --from=build /usr/src/app/frontend/jukebox-frontend /app/jukebox-frontend

# Make binary executable and set ownership
RUN chmod +x /app/jukebox-frontend && \
  chown bun:bun /app/jukebox-frontend

# Switch to non-root user
USER bun

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Run the binary (can be overridden with --entrypoint)
CMD ["/app/jukebox-frontend"]
